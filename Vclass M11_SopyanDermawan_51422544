class TreeNode:
    def __init__(self, key):
        self.key = key
        self.height = 1
        self.left = None
        self.right = None

class AVLTree:
    def getHeight(self, node):
        if node is None:
            return 0
        return node.height

    def getBalance(self, node):
        if node is None:
            return 0
        return self.getHeight(node.left) - self.getHeight(node.right)

    def updateHeight(self, node):
        if node is not None:
            node.height = 1 + max(self.getHeight(node.left), self.getHeight(node.right))

    def rotateRight(self, y):
        x = y.left
        T2 = x.right

        x.right = y
        y.left = T2

        self.updateHeight(y)
        self.updateHeight(x)

        return x

    def rotateLeft(self, x):
        y = x.right
        T2 = y.left

        y.left = x
        x.right = T2

        self.updateHeight(x)
        self.updateHeight(y)

        return y

    def insert(self, root, key):
        if root is None:
            return TreeNode(key)

        if key < root.key:
            root.left = self.insert(root.left, key)
        else:
            root.right = self.insert(root.right, key)

        self.updateHeight(root)

        balance = self.getBalance(root)

        # Kasus rotasi
        if balance > 1:
            if key < root.left.key:
                return self.rotateRight(root)
            else:
                root.left = self.rotateLeft(root.left)
                return self.rotateRight(root)

        if balance < -1:
            if key > root.right.key:
                return self.rotateLeft(root)
            else:
                root.right = self.rotateRight(root.right)
                return self.rotateLeft(root)

        return root

    def insertKey(self, key):
        self.root = self.insert(self.root, key)

    def preOrderTraversal(self, root):
        if root is not None:
            print(root.key, end=" ")
            self.preOrderTraversal(root.left)
            self.preOrderTraversal(root.right)

# Contoh penggunaan
avlTree = AVLTree()
keys = [10, 20, 30, 40, 50, 25]

for key in keys:
    avlTree.insertKey(key)

print("Preorder traversal dari AVL Tree:")
avlTree.preOrderTraversal(avlTree.root)
